//---------------------------------------------------------------------------

#include <fmx.h>
#pragma hdrstop

#include "prototype.h"
#include "Unit2.h"
#include "Unit3.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TForm3 *Form3;
//---------------------------------------------------------------------------
__fastcall TForm3::TForm3(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

//hides Form2 from view when this form is shown, sets up form for certain input level
void __fastcall TForm3::FormShow(TObject *Sender)
{
	//hide welcome form
	Form2->Hide();

	//set alreadyThere boolean to false
	alreadyThere = false;

	//get the current date in case accessLevel is 0
	TDateTime d = Now();
	pureDate = d;
	dateChosen = d.FormatString(L"yyyy-mm-dd");

	if (Form1->getAccessLevel() == 0)
	{
		//get the hotelID and query hotel_ref to find out which table to input to and which table to read from
		String currentHotelID = Form1->getHotelID();
		inputTable = "";
		readTable = "";
		laborTable = "";
		overtimePerHour = 0;
		SQLQuery2->SQL->Text = "SELECT input_table, read_table, labor_table, Overtime_Per_Hour FROM hotel_ref WHERE hotelID = '"+currentHotelID+"';";
		SQLQuery2->Open();
		SQLQuery2->First();
		if (!SQLQuery2->Eof)
		{
			inputTable = SQLQuery2->Fields->Fields[0]->AsString;
			readTable = SQLQuery2->Fields->Fields[1]->AsString;
			laborTable = SQLQuery2->Fields->Fields[2]->AsString;
			overtimePerHour = SQLQuery2->Fields->Fields[3]->AsFloat;
		}

		//show user input screen based on input level (i.e. default or advanced)
		if (Form1->getInputLevel() == 0)
		{
			//input level is "default", query db schema
			SQLQuery2->SQL->Text = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'baldwins_hotel_data' AND TABLE_NAME = '"+inputTable+"';";

			//open query and temporarily skip first two column headings
			SQLQuery2->Open();
			SQLQuery2->First();
			SQLQuery2->Next();
			SQLQuery2->Next();

			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			//set label to represent first editable column heading
			if(!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);
				dbFieldLabel->Text = editedHeading;
				dbFieldLabel->Visible = true;
				dbFieldEdit->Visible = true;
				dbFieldEdit->Text = "";
				nextImageButton->Visible = true;

				//initially set index and size to zero
				inputObject.currentIndex = 0;
				inputObject.size = 0;
			}
		}
		//input level is "advanced" for when userAccess == 0
		else
		{
			//hide form items
			dbFieldLabel->Visible = false;
			dbFieldEdit->Visible = false;
			nextImageButton->Visible = false;

			SQLQuery2->SQL->Text = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'baldwins_hotel_data' AND TABLE_NAME = '"+inputTable+"';";

			//open query and temporarily skip first two column headings
			SQLQuery2->Open();
			SQLQuery2->First();
			SQLQuery2->Next();
			SQLQuery2->Next();
			int count = 0;
			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			while (!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);

				//show and populate displayGrid
				displayGrid->Cells[0][count] = editedHeading;
				displayGrid->Cells[1][count] = "";

				++count;
				SQLQuery2->Next();
			}

			displayGrid->RowCount = count;
			Image3->Visible=false;
			inputLabelImage->Visible=false;
			displayGrid->Visible = true;
			submitButton->Visible = true;
			Image1->Visible=true;
		}
	}
	else
	{
		//accessLevel is not 0, show date picker before progressing

		//hide uneccessary items from this page
		dbFieldLabel->Visible = false;
		dbFieldEdit->Visible = false;
		nextImageButton->Visible = false;

        //get today's date
		TDateTime d = Now();
		pureDate = d;
		dateChosen = d.FormatString(L"yyyy-mm-dd");

		chooseDateImageButton->Visible = true;
		datePopupBoxLabel->Visible = true;
		calendar->Visible = true;
	}
}
//---------------------------------------------------------------------------

//avoids a never ending process by closing Form2 when this form is closed
void __fastcall TForm3::FormClose(TObject *Sender, TCloseAction &Action)
{
	Form2->Close();
}
//---------------------------------------------------------------------------

//take user back to main menu when clicked
void __fastcall TForm3::homeImageButton3Click(TObject *Sender)
{
	//hide certain items
	backImageButton->Visible = false;
	Image4->Visible=false;
	displayGrid->Visible = false;
	submitButton->Visible = false;
	Image1->Visible=false;

	//set calendar choice back to current date
	calendar->Date = Now();

	//clear all items from inputObject
	inputObject.valueMap.clear();
	inputObject.size = 0;
	inputObject.currentIndex = 0;

	//hide current form and show welcome screen
	Form3->Hide();
	Form2->Show();
}
//---------------------------------------------------------------------------

//go through column headings as desired by the user
void __fastcall TForm3::nextImageButtonClick(TObject *Sender)
{

		//check for blank input
		if (SameText(dbFieldEdit->Text,""))
		{
			errorLabel->Visible=true;
			return;
		}

		//check to see if string contains only digits and decimal
	string inputString=AnsiString(dbFieldEdit->Text).c_str();
	for (int i = 0; i < inputString.length(); i++)
	{
				//check to see if the character is 0-9 or a decimal
			//if((inputString[i]<48 || inputString[i]>57) && inputString[i]!=46)
			if(inputString[i]<48 || inputString[i]>57)
			{
				if(inputString[i]==46)
				{
					if(inputString[i+1]<48 || inputString[i+1]>57)
					{
                        dbFieldEdit->Text="";
						errorLabel->Visible=true;
						return;
					}
				}
				else
				{
					dbFieldEdit->Text="";
					errorLabel->Visible=true;
					return;
				}

			}
	}

	//make sure the error label does not appear
	errorLabel->Visible=false;
	if (inputObject.currentIndex == 0 && inputObject.size == 0)
	{
		//run when displayObject is empty

        //strings used in if for holdling column headings
		String originalHeading = "";
		String editedHeading = "";

		//get initial column heading without formatting (i.e. removing "_")
		originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

		//replace underscores with spaces and set label
		editedHeading = StringReplace(originalHeading, "_", " ",
			TReplaceFlags() << rfReplaceAll);

		//add data to inputObject and increase index/size
		vector<String> temp;
		temp.push_back(originalHeading);
		temp.push_back(editedHeading);
		temp.push_back(dbFieldEdit->Text);
		inputObject.valueMap[inputObject.currentIndex] = temp;
		dbFieldEdit->Text = "";
		(inputObject.currentIndex)++;
		(inputObject.size)++;
		originalHeading = "";
		editedHeading = "";

		//advance query
		SQLQuery2->Next();

		//get initial column heading without formatting (i.e. removing "_")
		originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

		//replace underscores with spaces and set label
		editedHeading = StringReplace(originalHeading, "_", " ",
			TReplaceFlags() << rfReplaceAll);
		dbFieldLabel->Text = editedHeading;

		backImageButton->Visible = true;
	}
	else if (inputObject.currentIndex == inputObject.size)
	{
		//will run when it is time to get the next column from the db

		//strings used in if for holdling column headings
		String originalHeading = "";
		String editedHeading = "";

		if(!SQLQuery2->Eof)
		{
			//get initial column heading without formatting (i.e. removing "_")
			originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

			//replace underscores with spaces and set label
			editedHeading = StringReplace(originalHeading, "_", " ",
				TReplaceFlags() << rfReplaceAll);

			//fill inputObject with data and increse index/size
			vector<String> temp;
			temp.push_back(originalHeading);
			temp.push_back(editedHeading);
			temp.push_back(dbFieldEdit->Text);
			inputObject.valueMap[inputObject.currentIndex] = temp;
			dbFieldEdit->Text = "";
			(inputObject.currentIndex)++;
			(inputObject.size)++;
			originalHeading = "";
			editedHeading = "";

			//advance query cursor
			SQLQuery2->Next();

			//check if now at the end of the query
			if(SQLQuery2->Eof)
			{
				//spawn next part that displays desired changes and asks if sure

				//hide all other items on form besides home button
				dbFieldLabel->Visible = false;
				dbFieldEdit->Visible = false;
				nextImageButton->Visible = false;
				nextLabelImage->Visible=false;

				//show and populate displayGrid
				displayGrid->RowCount = inputObject.valueMap.size();
				for (int i = 0; i < inputObject.size; ++i)
				{
					displayGrid->Cells[0][i] = inputObject.valueMap[i][1];
					displayGrid->Cells[1][i] = inputObject.valueMap[i][2];
				}
				Image3->Visible=false;
				Image4->Visible=false;
				 inputLabelImage->Visible=false;
				displayGrid->Visible = true;
				submitButton->Visible = true;
				Image1->Visible=true;
			}
			else
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);
				dbFieldLabel->Text = editedHeading;
				backImageButton->Visible = true;
			}
		}
	}
	else
	{
		//don't query db, only go to next item in struct, replace item before advancing
		inputObject.valueMap[inputObject.currentIndex].pop_back();
		inputObject.valueMap[inputObject.currentIndex].push_back(dbFieldEdit->Text);
		dbFieldEdit->Text = "";
		(inputObject.currentIndex)++;

		if (inputObject.currentIndex == inputObject.size)
		{
			//accounts for case when coming back after pressing previous if data not previously captured

			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			if(!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = "";
				editedHeading = "";

				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);
				dbFieldLabel->Text = editedHeading;

				backImageButton->Visible = true;
			}
			else
			{
              	//spawn next part that displays desired changes and asks if sure

				//hide all other items on form besides home button
				dbFieldLabel->Visible = false;
				dbFieldEdit->Visible = false;
				nextImageButton->Visible = false;
				Image3->Visible=false;
				Image4->Visible=false;
				nextLabelImage->Visible=false;

				//show and populate displayGrid
				for (int i = 0; i < inputObject.size; ++i)
				{
					displayGrid->Cells[0][i+1] = inputObject.valueMap[i][1];
					displayGrid->Cells[1][i+1] = inputObject.valueMap[i][2];
				}


				submitButton->Visible = true;
				Image1->Visible=true;
				displayGrid->Visible = true;
			}
		}
		else
		{
			//when next pressed and data for this index has previously been captured
			dbFieldEdit->Text = inputObject.valueMap[inputObject.currentIndex][2];
			dbFieldLabel->Text = inputObject.valueMap[inputObject.currentIndex][1];
			backImageButton->Visible = true;
        }

    }
}
//---------------------------------------------------------------------------

//go to previous item in struct, show in label field
void __fastcall TForm3::backImageButtonClick(TObject *Sender)
{
	//make sure the error label does not appear
	errorLabel->Visible=false;

	//for when grid displayed and back button pressed
	if (displayGrid->Visible)
	{
		displayGrid->Visible = false;
		submitButton->Visible = false;
		Image1->Visible=false;
		dbFieldLabel->Visible = true;
		dbFieldEdit->Visible = true;
		nextImageButton->Visible = true;
	}

	(inputObject.currentIndex)--;
	if (inputObject.currentIndex == 0)
		{
			backImageButton->Visible = false;
        	Image4->Visible=false;
		}

	dbFieldEdit->Text = inputObject.valueMap[inputObject.currentIndex][2];
	dbFieldLabel->Text = inputObject.valueMap[inputObject.currentIndex][1];
}
//---------------------------------------------------------------------------

//ask user if sure, yes == submit and no == do nothing
void __fastcall TForm3::submitButtonClick(TObject *Sender)
{

	int msgboxID = MessageBox(
		NULL,
		L"Would you really like to submit?",
		L"Confirm Input Submission",
		MB_ICONEXCLAMATION | MB_YESNO
	);

	if (msgboxID == IDYES)
	{
		//yes selected, save information in grid to database

		//create empty strings to add to query once populated from grid
		String headings = "";
		String values = "";
		String update = "";
		String updateHeading = "";

		//get day of week
		int Day = DayOfWeek(pureDate);
		String DayName;
		switch(Day)
		{
		case 1:
			DayName = L"Sunday";
			break;
		case 2:
			DayName = L"Monday";
			break;
		case 3:
			DayName = L"Tuesday";
			break;
		case 4:
			DayName = L"Wednesday";
			break;
		case 5:
			DayName = L"Thursday";
			break;
		case 6:
			DayName = L"Friday";
			break;
		case 7:
			DayName = L"Saturday";
		}

		//populate date and day of week (probably temporary solution)
		headings += ("Date, Day_Of_Week, ");
		values += ("'" + dateChosen + "', '" + DayName + "', ");

		//construct headings and values for an update query instead of insert query
		if (alreadyThere)
		{
			//populate strings only from the grid
			for (int i = 0; i < displayGrid->RowCount; ++i)
			{
				updateHeading = StringReplace(displayGrid->Cells[0][i], " ", "_", TReplaceFlags() << rfReplaceAll);

				if (i + 1 == displayGrid->RowCount)
				{
					update += (updateHeading + " = '" + displayGrid->Cells[1][i] + "'");
				}
				else
				{
					update += (updateHeading + " = '" + displayGrid->Cells[1][i] + "', ");
				}
			}
		}
		//check if basic input was used, if so populate headings/values from inputObject
		else if (Form1->getInputLevel() == 0)
		{
			//populate rest of strings from grid
			for (int i = 0; i < inputObject.size; ++i)
			{
				if (i + 1 == inputObject.size)
				{
					headings += ("" + inputObject.valueMap[i][0] + "");
					values += ("'" + displayGrid->Cells[1][i] + "'");
				}
				else
				{
					headings += ("" + inputObject.valueMap[i][0] + ", ");
					values += ("'" + displayGrid->Cells[1][i] + "', ");
				}
			}
		}
		//if inputLevel is not basic, get both headings and values from the grid
		else
		{
			//populate strings only from the grid (might not be "minus 1")
			for (int i = 0; i < displayGrid->RowCount; ++i)
			{
				if (i + 1 == displayGrid->RowCount)
				{
					headings += ("" + StringReplace(displayGrid->Cells[0][i], " ", "_", TReplaceFlags() << rfReplaceAll) + "");
					values += ("'" + displayGrid->Cells[1][i] + "'");
				}
				else
				{
					headings += ("" + StringReplace(displayGrid->Cells[0][i], " ", "_", TReplaceFlags() << rfReplaceAll) + ", ");
					values += ("'" + displayGrid->Cells[1][i] + "', ");
				}
			}
		}

		//run update query if item already in database
		if (alreadyThere)
		{
			//update the raw_input table
			SQLQuery2->SQL->Text = "UPDATE baldwins_hotel_data."+inputTable+" SET "+update+" WHERE "+inputTable+".Date = '"+dateChosen+"';";
			SQLQuery2->ExecSQL();

			//update the read_data table
			SQLQuery2->SQL->Text = "UPDATE baldwins_hotel_data."+readTable+" SET "+update+" WHERE "+readTable+".Date = '"+dateChosen+"';";
			SQLQuery2->ExecSQL();
		}
		//if item not there, then run the normal insert query
		else
		{
			//query input_table db and insert new row
			SQLQuery2->SQL->Text = "INSERT INTO baldwins_hotel_data."+inputTable+" ("+headings+") VALUES ("+values+");";
			SQLQuery2->ExecSQL();

			//query read_table db and insert new row
			SQLQuery2->SQL->Text = "INSERT INTO baldwins_hotel_data."+readTable+" ("+headings+") VALUES ("+values+");";
			SQLQuery2->ExecSQL();
		}

		//Calculate and update values for Standard_Hours and Percent_Performance
		//first, query role_table to get all the Role_Name, Bare_Role_Name and Standard_Hours_Reference
		String currentHotelID = Form1->getHotelID();
		vector<calculateInfo> infoVector;
		String roleName = "";
		String roleStandardHoursName = "";
		String bareRoleName = "";
		String standardHoursReference = "";
		int context = 0;
		double actual = 0;
		double labor = 0;
		double roleWages = 0;
		double totalLaborHoursHoursPaid = 0;
		double totalLaborHoursStandardHours = 0;
		double totalLaborHoursPercentPerformance = 0;
		double totalLaborCostHoursPaid = 0;
		double totalLaborCostStandardHours = 0;
		double totalLaborCostPercentPerformance = 0;
		SQLQuery2->SQL->Text = "SELECT Role_Name, Bare_Role_Name, Standard_Hours_Reference, Role_Wages FROM baldwins_hotel_data.role_table WHERE hotelID = '"+currentHotelID+"';";
		SQLQuery2->Open();
		SQLQuery2->First();
		while (!SQLQuery2->Eof)
		{
			//fill strings
			roleName = SQLQuery2->Fields->Fields[0]->AsString;
			roleStandardHoursName = StringReplace(roleName, "Hours_Paid", "Standard_Hours", TReplaceFlags() << rfReplaceAll);
			bareRoleName = SQLQuery2->Fields->Fields[1]->AsString;
			standardHoursReference = SQLQuery2->Fields->Fields[2]->AsString;
			roleWages = SQLQuery2->Fields->Fields[3]->AsFloat;

			//get the integer value based on above strings
			SQLQuery3->SQL->Text = "SELECT "+roleName+", "+standardHoursReference+" FROM baldwins_hotel_data."+readTable+" WHERE Date = '"+dateChosen+"';";
			SQLQuery3->Open();
			SQLQuery3->First();
			if (!SQLQuery3->Eof)
			{
				//get values for normal use in this while loop
				actual = SQLQuery3->Fields->Fields[0]->AsFloat;
				context = SQLQuery3->Fields->Fields[1]->AsInteger;
			}

			//get the labor value for standard hours
			SQLQuery3->SQL->Text = "SELECT "+bareRoleName+" FROM baldwins_hotel_data."+laborTable+" WHERE "+context+" >= Rooms_Occupied_Low AND "+context+" <= Rooms_Occupied_High;";
			SQLQuery3->Open();
			SQLQuery3->First();
			if (!SQLQuery3->Eof)
			{
               	labor = SQLQuery3->Fields->Fields[0]->AsFloat;
			}

			//push_back calculateInfo object
			infoVector.push_back(calculateInfo(roleName, roleStandardHoursName, bareRoleName, standardHoursReference, context, actual, labor));

			//compute values used below this while loop in actual update query
			totalLaborHoursHoursPaid += actual;
			totalLaborHoursStandardHours += labor;
			totalLaborCostHoursPaid = totalLaborCostHoursPaid + (actual * roleWages);
			totalLaborCostStandardHours = totalLaborCostStandardHours + (labor * roleWages);

			//reset strings and doubles to empty for next iteration
			roleName = "";
			roleStandardHoursName = "";
			bareRoleName = "";
			standardHoursReference = "";
			actual = 0;
			context = 0;
			labor = 0;
			roleWages = 0;
			/*totalLaborHoursHoursPaid = 0;
			totalLaborHoursStandardHours = 0;
			totalLaborHoursPercentPerformance = 0;
			totalLaborCostHoursPaid = 0;
			totalLaborCostStandardHours = 0;
			totalLaborCostPercentPerformance = 0;*/

			//move cursor to next item
			SQLQuery2->Next();
		}

		//run update query that updates standard hours and percent performance
		updateHeading = "";
		String updateHeading2 = "";
		update = "";
		labor = 0;
		double percent = 0;
		for (int i = 0; i < infoVector.size(); ++i)
		{
			updateHeading = infoVector[i].roleStandardHours;
			updateHeading2 = StringReplace(updateHeading, "Standard_Hours", "Percent_Performance", TReplaceFlags() << rfReplaceAll);
			labor = infoVector[i].laborValue;
            percent = infoVector[i].percentPerformance;

			/*if (i + 1 == infoVector.size())
			{
				update += (updateHeading + " = '" + labor + "', " + updateHeading2 + " = '" + percent + "'");
			}*/
			//else
			//{
				update += (updateHeading + " = '" + labor + "', " + updateHeading2 + " = '" + percent + "', ");
			//}
		}

		//calculate/store overtime, total_labor_hours, total_labor_cost in read_data
		double overtimeHoursPaid = 0;
		double overtimeStandardHours = 0;
		double overtimePercentPerformance = 0;
		SQLQuery3->SQL->Text = "SELECT Overtime_Hours_Paid FROM baldwins_hotel_data."+inputTable+" WHERE "+inputTable+".Date = '"+dateChosen+"';";
		SQLQuery3->Open();
		SQLQuery3->First();
		if (!SQLQuery3->Eof)
			overtimeHoursPaid = SQLQuery3->Fields->Fields[0]->AsFloat;
		overtimeStandardHours = overtimePerHour * overtimeHoursPaid;
		overtimePercentPerformance = overtimeStandardHours / 3;
		if (totalLaborHoursHoursPaid != 0)
			totalLaborHoursPercentPerformance = totalLaborHoursStandardHours / totalLaborHoursHoursPaid;
		else
			totalLaborHoursPercentPerformance = 0;
		if (totalLaborCostHoursPaid != 0)
			totalLaborCostPercentPerformance = totalLaborCostStandardHours / totalLaborCostHoursPaid;
		else
			totalLaborCostPercentPerformance = 0;
		totalLaborCostHoursPaid += overtimeHoursPaid;
		String spaceTaker = "";
		update += (spaceTaker + "Overtime_Hours_Paid = '" + overtimeHoursPaid + "', " + "Overtime_Standard_Hours = '" + overtimeStandardHours + "', " + "Overtime_Percent_Performance = '" + overtimePercentPerformance + "', ");
		update += (spaceTaker + "Total_Labor_Hours_Hours_Paid = '" + totalLaborHoursHoursPaid + "', " + "Total_Labor_Hours_Standard_Hours = '" + totalLaborHoursStandardHours + "', " + "Total_Labor_Hours_Percent_Performance = '" + totalLaborHoursPercentPerformance + "', ");
		update += (spaceTaker + "Total_Labor_Cost_Hours_Paid = '" + totalLaborCostHoursPaid + "', " + "Total_Labor_Cost_Standard_Hours = '" + totalLaborCostStandardHours + "', " + "Total_Labor_Cost_Percent_Performance = '" + totalLaborCostPercentPerformance + "'");
		SQLQuery2->SQL->Text = "UPDATE baldwins_hotel_data."+readTable+" SET "+update+" WHERE "+readTable+".Date = '"+dateChosen+"';";
		SQLQuery2->ExecSQL();

		//Take back to welcome screen (form2)
		Form3->Hide();
		Form2->Show();

		//hide unecessary items
		useArrowsImage->Visible=false;
		displayGrid->Visible = false;
		submitButton->Visible = false;
		Image1->Visible=false;
		backImageButton->Visible = false;
		Image4->Visible=false;
		inputLabelImage->Visible=false;
		Image3->Visible=false;
		//make sure the error label does not appear
	errorLabel->Visible=false;
	}
	else
	{
		//no selected, save nothing and show form again (do nothing)
	}
}
//---------------------------------------------------------------------------

//check if enter button is pressed from inside dbFieldEdit
void __fastcall TForm3::dbFieldEditKeyDown(TObject *Sender, WORD &Key, System::WideChar &KeyChar,
          TShiftState Shift)
{
	//if enter button pressed, click next button
	if (Key == 13)
	{
     	nextImageButton->OnClick(NULL);
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm3::chooseDateImageButtonClick(TObject *Sender)
{
	//hide date related items
	chooseDateImageButton->Visible = false;
	datePopupBoxLabel->Visible = false;
	calendar->Visible = false;
	inputLabelImage->Visible=true;

	//at this point dateChosen has whatever date is desired
	//need to now do normal basic or advanced input depending on accessLevel

	//query input_table to see if dateChosen is filled already or not
	//if filled, show advanced view with data filled in
	//if not filled, show basic view and allow normal progression

	//check if current date already input for most basic user
	String currentHotelID = Form1->getHotelID();
	SQLQuery2->SQL->Text = "SELECT input_table, read_table, labor_table, Overtime_Per_Hour FROM hotel_ref WHERE hotelID = '"+currentHotelID+"';";
	SQLQuery2->Open();
	SQLQuery2->First();

	if (!SQLQuery2->Eof)
	{
		//get what the inputTable is and what read table is (for future insert)
		inputTable = SQLQuery2->Fields->Fields[0]->AsString;
		readTable = SQLQuery2->Fields->Fields[1]->AsString;
		laborTable = SQLQuery2->Fields->Fields[2]->AsString;
		overtimePerHour = SQLQuery2->Fields->Fields[3]->AsFloat;

		//query to see if tuple exists for dateChosen
		SQLQuery2->SQL->Text = "SELECT * FROM "+inputTable+" WHERE Date = '"+dateChosen+"';";
		SQLQuery2->Open();
		SQLQuery2->First();

		//if tuple exists, display in grid similar to advanced view
		if (!SQLQuery2->Eof)
		{
			//hide form items
			dbFieldLabel->Visible = false;
			dbFieldEdit->Visible = false;
			nextImageButton->Visible = false;

			SQLQuery2->SQL->Text = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'baldwins_hotel_data' AND TABLE_NAME = '"+inputTable+"';";
			SQLQuery3->SQL->Text = "SELECT * FROM "+inputTable+" WHERE Date = '"+dateChosen+"';";

			//open query and temporarily skip first two column headings (Date/Day_Of_Week)
			SQLQuery2->Open();
			SQLQuery2->First();
			SQLQuery2->Next();
			SQLQuery2->Next();

			//open second query
			SQLQuery3->Open();
			SQLQuery3->First();

			int count = 0;
			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			while (!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);

				//show and populate displayGrid
				displayGrid->Cells[0][count] = editedHeading;
				displayGrid->Cells[1][count] = SQLQuery3->Fields->Fields[count+2]->AsString;

				//increase count and cursors
				++count;
				SQLQuery2->Next();
			}
			inputLabelImage->Visible=false;
			displayGrid->RowCount = count;
			displayGrid->Visible = true;
			Image3->Visible=false;
			submitButton->Visible = true;
			Image1->Visible=true;

			//set alreadyThere boolean to true (signifying the need for an update query when submit is clicked)
			alreadyThere = true;
		}
		//if inputLevel is advanced and no input for this date, show blank advanced view
		else if (Form1->getInputLevel() == 1)
		{
			//hide form items
			inputLabelImage->Visible=false;
			dbFieldLabel->Visible = false;
			dbFieldEdit->Visible = false;
			nextImageButton->Visible = false;
			Image3->Visible=false;

			SQLQuery2->SQL->Text = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'baldwins_hotel_data' AND TABLE_NAME = '"+inputTable+"';";

			//open query and temporarily skip first two column headings (Date/Day_Of_Week)
			SQLQuery2->Open();
			SQLQuery2->First();
			SQLQuery2->Next();
			SQLQuery2->Next();

			int count = 0;
			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			while (!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);

				//show and populate displayGrid
				displayGrid->Cells[0][count] = editedHeading;
				displayGrid->Cells[1][count] = "";

				++count;
				SQLQuery2->Next();
			}

			displayGrid->RowCount = count;
			displayGrid->Visible = true;
			inputLabelImage->Visible=false;
			Image3->Visible=false;
			submitButton->Visible = true;
			Image1->Visible=true;
		}
		//otherwise, run basic input for this chosenDate
		else
		{
			//hide/show uneccessary/necessary items from this page
			dbFieldLabel->Visible = true;
			dbFieldEdit->Visible = true;
			nextImageButton->Visible = true;
			chooseDateImageButton->Visible = false;
			calendar->Visible = false;
			datePopupBoxLabel->Visible = false;

         	//input level is "default", query db schema
			SQLQuery2->SQL->Text = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'baldwins_hotel_data' AND TABLE_NAME = '"+inputTable+"';";

			//open query and temporarily skip first two column headings
			SQLQuery2->Open();
			SQLQuery2->First();
			SQLQuery2->Next();
			SQLQuery2->Next();

			//strings used in if for holdling column headings
			String originalHeading = "";
			String editedHeading = "";

			//set label to represent first editable column heading
			if(!SQLQuery2->Eof)
			{
				//get initial column heading without formatting (i.e. removing "_")
				originalHeading = SQLQuery2->Fields->Fields[0]->AsString;

				//replace underscores with spaces and set label
				editedHeading = StringReplace(originalHeading, "_", " ",
					TReplaceFlags() << rfReplaceAll);
				dbFieldLabel->Text = editedHeading;
				dbFieldLabel->Visible = true;
				dbFieldEdit->Visible = true;
				dbFieldEdit->Text = "";
				nextImageButton->Visible = true;

				//initially set index and size to zero
				inputObject.currentIndex = 0;
				inputObject.size = 0;
			}
		}
	}

	//set date chosen back to current date
	calendar->Date = Now();
}
//---------------------------------------------------------------------------

//when the calendar choice is changed, change variables accordingly
void __fastcall TForm3::calendarChange(TObject *Sender)
{
	pureDate = calendar->Date;
	dateChosen = StrToDate(pureDate).FormatString(L"yyyy-mm-dd");
}
//---------------------------------------------------------------------------



void __fastcall TForm3::homeImageButton5MouseEnter(TObject *Sender)
{
home_swapper->Bitmap=homeImageButton5->Bitmap;
homeImageButton5->Bitmap=home_over->Bitmap;
homeLabelImage->Visible=true;
}
//---------------------------------------------------------------------------

void __fastcall TForm3::homeImageButton5MouseLeave(TObject *Sender)
{
homeImageButton5->Bitmap=home_swapper->Bitmap;
homeLabelImage->Visible=false;
}
//---------------------------------------------------------------------------

void __fastcall TForm3::homeImageButton5Click(TObject *Sender)
{
	//hide certain items
	backImageButton->Visible = false;
	useArrowsImage->Visible =false;
	Image4->Visible=false;
	displayGrid->Visible = false;
	submitButton->Visible = false;
	Image1->Visible=false;
	inputLabelImage->Visible=false;
	Image3->Visible=false;
	//make sure the error label does not appear
	errorLabel->Visible=false;

	//set calendar choice back to current date
	calendar->Date = Now();

	//clear all items from inputObject
	inputObject.valueMap.clear();
	inputObject.size = 0;
	inputObject.currentIndex = 0;

	//hide current form and show welcome screen
	Form3->Hide();
	Form2->Show();
}
//---------------------------------------------------------------------------

void __fastcall TForm3::nextImageButtonMouseEnter(TObject *Sender)
{
Image3->Visible=true;
nextLabelImage->Visible=true;
home_swapper->Bitmap=nextImageButton->Bitmap;
nextImageButton->Bitmap=nextOver->Bitmap;
}
//---------------------------------------------------------------------------

void __fastcall TForm3::nextImageButtonMouseLeave(TObject *Sender)
{
nextImageButton->Bitmap=home_swapper->Bitmap;
nextLabelImage->Visible=false;
}
//---------------------------------------------------------------------------

void __fastcall TForm3::backImageButtonMouseEnter(TObject *Sender)
{
home_swapper->Bitmap=backImageButton->Bitmap;
backImageButton->Bitmap=backOver->Bitmap;
Image5->Visible=true;
Image4->Visible=true;
}
//---------------------------------------------------------------------------

void __fastcall TForm3::backImageButtonMouseLeave(TObject *Sender)
{
Image4->Visible=false;
Image5->Visible=false;
backImageButton->Bitmap=home_swapper->Bitmap;

}
//---------------------------------------------------------------------------

void __fastcall TForm3::submitButtonMouseEnter(TObject *Sender)
{
home_swapper->Bitmap=submitButton->Bitmap;
submitButton->Bitmap=submitOver->Bitmap;
submitLabelImage->Visible=true;


}
//---------------------------------------------------------------------------

void __fastcall TForm3::submitButtonMouseLeave(TObject *Sender)
{
submitButton->Bitmap=home_swapper->Bitmap;
submitLabelImage->Visible=false;
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------

void __fastcall TForm3::StringColumn2KeyDown(TObject *Sender, WORD &Key, System::WideChar &KeyChar,
          TShiftState Shift)
{
useArrowsImage->Visible=true;
}
//---------------------------------------------------------------------------


void __fastcall TForm3::displayGridClick(TObject *Sender)
{
useArrowsImage->Visible=true;
}
//---------------------------------------------------------------------------


void __fastcall TForm3::displayGridKeyDown(TObject *Sender, WORD &Key, System::WideChar &KeyChar,
          TShiftState Shift)
{
if(Key==VK_UP || Key==VK_DOWN)
	{
	useArrowsImage->Visible=false;
	}
}
//---------------------------------------------------------------------------

